package com.login;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.hms.login.page.HMSLoginPage;

Run All
public class TestLoginWithDataProvider {

//	public TestLoginWithDataProvider() {
//		testDataFileName = "logindata.xlsx";
//		testDataSheetName = "Login";
//	}
	WebDriver driver;

	@BeforeTest
	public void luanchHMSApp() {
		try {
			String projectLocation = System.getProperty("user.dir");
			System.setProperty("webdriver.chrome.driver",
					projectLocation + "\\src\\test\\resources\\drivers\\" + "chromedriver.exe");
			ChromeOptions chromeOptions = new ChromeOptions();
			chromeOptions.addArguments("--remote-allow-origins=*");
			driver = new ChromeDriver(chromeOptions);

			FileInputStream fis = new FileInputStream(
					projectLocation + "\\src\\test\\resources\\properties\\application-test.properties");
			Properties prop = new Properties();
			prop.load(fis);

			driver.get(prop.getProperty("url"));
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.out.println("file not found");

		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("launching application is failing");
		}
	}

	/*
	 * @Test(dataProvider = "testdata") public void testLoginNegative(String user,
	 * String pwd) { HMSLoginPage page = new HMSLoginPage(driver);
	 * page.hmsLogin(user, pwd); page.logout(); }
	 * 
	 * // for 100 samples of data logic
	 * 
	 * @DataProvider(name = "testdata") public Object[][] samples() {
	 * 
	 * Object[][] obj = new Object[][] { { "admin", "kosmik7" }, { "kosmik",
	 * "kosmik" }, { "admin", "kosmik7" }, { "kosmik", "kosmik" }, { "admin",
	 * "kosmik0" }, { "kosmik", "kosmik1"} }; return obj; }
	 */
	// or
	@Test(dataProvider = "testdata")
	Run | Debug
	public void testLoginPositiveWithExpectedResult(String credentials, String expectedResult) {
		HMSLoginPage page = new HMSLoginPage(driver);
		String[] cred = credentials.split("-");
		String text = page.hmsLogin(cred[0], cred[1]);
		page.logout();
		Assert.assertEquals(text, expectedResult);
	}

	// for 100 samples of data logic
	@DataProvider(name = "testdata")
	public Object[][] Samples() {

		
		  Object[][] obj = new Object[][] { 
			  {"admin-kosmik7","Logout"},
			  {"kosmik-kosmik","Logout"}
			 };
		 
		return obj;
	}

}
